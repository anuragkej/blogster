{
    "sourceFile": "src/useFetch.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1727316442644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727316486743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,11 @@\n+import { useState, useEffect } from \"react\";\n+\n const useFetch = () => {\n+  const [blogs, setBlogs] = useState(null);\n+  const [isPending, setIsPending] = useState(true);\n+  const [error, setError] = useState(null);\n+\n   useEffect(() => {\n     setTimeout(() => {\n       fetch(\"http://localhost:8000/blogs\")\n         .then((res) => {\n"
                },
                {
                    "date": 1727316525550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState, useEffect } from \"react\";\n \n const useFetch = () => {\n-  const [blogs, setBlogs] = useState(null);\n+  const [data, setData] = useState(null);\n   const [isPending, setIsPending] = useState(true);\n   const [error, setError] = useState(null);\n \n   useEffect(() => {\n@@ -14,9 +14,9 @@\n           }\n           return res.json();\n         })\n         .then((data) => {\n-          setBlogs(data);\n+          setData(data);\n           setIsPending(false);\n           setError(null);\n         })\n         .catch((err) => {\n@@ -25,4 +25,6 @@\n         }); // catches network error\n     }, 1000);\n   }, []);\n };\n+\n+export default useFetch;\n"
                },
                {
                    "date": 1727316609508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { useState, useEffect } from \"react\";\n \n-const useFetch = () => {\n+const useFetch = (url) => {\n   const [data, setData] = useState(null);\n   const [isPending, setIsPending] = useState(true);\n   const [error, setError] = useState(null);\n \n   useEffect(() => {\n     setTimeout(() => {\n-      fetch(\"http://localhost:8000/blogs\")\n+      fetch(url)\n         .then((res) => {\n           if (!res.ok) {\n             throw Error(\"Could not fetch the data for that resource\");\n           }\n@@ -23,8 +23,10 @@\n           setIsPending(false);\n           setError(err.message);\n         }); // catches network error\n     }, 1000);\n-  }, []);\n+  }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n+\n+  return { data, isPending, error };\n };\n \n export default useFetch;\n"
                },
                {
                    "date": 1727502821624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { useState, useEffect } from \"react\";\n+\n+const useFetch = (url) => {\n+  const [data, setData] = useState(null);\n+  const [isPending, setIsPending] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    setTimeout(() => {\n+      fetch(url)\n+        .then((res) => {\n+          if (!res.ok) {\n+            throw Error(\"Could not fetch the data for that resource\");\n+          }\n+          return res.json();\n+        })\n+        .then((data) => {\n+          setData(data);\n+          setIsPending(false);\n+          setError(null);\n+        })\n+        .catch((err) => {\n+          setIsPending(false);\n+          setError(err.message);\n+        }); // catches network error\n+    }, 1000);\n+\n+    return () => console.log(\"cleanup\");\n+  }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n+\n+  return { data, isPending, error };\n+};\n+\n+export default useFetch;\n"
                },
                {
                    "date": 1727502879623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,12 @@\n   const [isPending, setIsPending] = useState(true);\n   const [error, setError] = useState(null);\n \n   useEffect(() => {\n+    const abortCont = new AbortController();\n+\n     setTimeout(() => {\n-      fetch(url)\n+      fetch(url, { signal: abortCont.signal })\n         .then((res) => {\n           if (!res.ok) {\n             throw Error(\"Could not fetch the data for that resource\");\n           }\n@@ -31,36 +33,4 @@\n   return { data, isPending, error };\n };\n \n export default useFetch;\n-import { useState, useEffect } from \"react\";\n-\n-const useFetch = (url) => {\n-  const [data, setData] = useState(null);\n-  const [isPending, setIsPending] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    setTimeout(() => {\n-      fetch(url)\n-        .then((res) => {\n-          if (!res.ok) {\n-            throw Error(\"Could not fetch the data for that resource\");\n-          }\n-          return res.json();\n-        })\n-        .then((data) => {\n-          setData(data);\n-          setIsPending(false);\n-          setError(null);\n-        })\n-        .catch((err) => {\n-          setIsPending(false);\n-          setError(err.message);\n-        }); // catches network error\n-    }, 1000);\n-  }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n-\n-  return { data, isPending, error };\n-};\n-\n-export default useFetch;\n"
                },
                {
                    "date": 1727502890845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           setError(err.message);\n         }); // catches network error\n     }, 1000);\n \n-    return () => console.log(\"cleanup\");\n+    return () => abortCont.abort();\n   }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n \n   return { data, isPending, error };\n };\n"
                },
                {
                    "date": 1727503027972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import { useState, useEffect } from \"react\";\n+\n+const useFetch = (url) => {\n+  const [data, setData] = useState(null);\n+  const [isPending, setIsPending] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    const abortCont = new AbortController();\n+\n+    setTimeout(() => {\n+      fetch(url, { signal: abortCont.signal })\n+        .then((res) => {\n+          if (!res.ok) {\n+            throw Error(\"Could not fetch the data for that resource\");\n+          }\n+          return res.json();\n+        })\n+        .then((data) => {\n+          setData(data);\n+          setIsPending(false);\n+          setError(null);\n+        })\n+        .catch((err) => {\n+          setIsPending(false);\n+          setError(err.message);\n+        }); // catches network error\n+    }, 1000);\n+\n+    return () => abortCont.abort();\n+  }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n+\n+  return { data, isPending, error };\n+};\n+\n+export default useFetch;\n"
                },
                {
                    "date": 1727503080636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,46 +21,14 @@\n           setIsPending(false);\n           setError(null);\n         })\n         .catch((err) => {\n-          setIsPending(false);\n-          setError(err.message);\n-        }); // catches network error\n-    }, 1000);\n-\n-    return () => abortCont.abort();\n-  }, [url]); // put url as a dependency so that whenevr url changes, it has to reload\n-\n-  return { data, isPending, error };\n-};\n-\n-export default useFetch;\n-import { useState, useEffect } from \"react\";\n-\n-const useFetch = (url) => {\n-  const [data, setData] = useState(null);\n-  const [isPending, setIsPending] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    const abortCont = new AbortController();\n-\n-    setTimeout(() => {\n-      fetch(url, { signal: abortCont.signal })\n-        .then((res) => {\n-          if (!res.ok) {\n-            throw Error(\"Could not fetch the data for that resource\");\n+          if (err.name === \"AbortError\") {\n+            console.log(\"fetch aborted\");\n+          } else {\n+            setIsPending(false);\n+            setError(err.message);\n           }\n-          return res.json();\n-        })\n-        .then((data) => {\n-          setData(data);\n-          setIsPending(false);\n-          setError(null);\n-        })\n-        .catch((err) => {\n-          setIsPending(false);\n-          setError(err.message);\n         }); // catches network error\n     }, 1000);\n \n     return () => abortCont.abort();\n"
                }
            ],
            "date": 1727316442644,
            "name": "Commit-0",
            "content": "const useFetch = () => {\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(\"http://localhost:8000/blogs\")\n        .then((res) => {\n          if (!res.ok) {\n            throw Error(\"Could not fetch the data for that resource\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          setBlogs(data);\n          setIsPending(false);\n          setError(null);\n        })\n        .catch((err) => {\n          setIsPending(false);\n          setError(err.message);\n        }); // catches network error\n    }, 1000);\n  }, []);\n};\n"
        }
    ]
}